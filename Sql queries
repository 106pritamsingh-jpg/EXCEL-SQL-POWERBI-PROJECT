-- ========================================================
-- BOOK ORDERS ANALYSIS PROJECT - SQL SCRIPT
-- Author: [Your Name]
-- Description: SQL queries used to analyze book orders data
-- ========================================================

-- =========================================
-- 0. DATABASE & TABLE CHECK
-- =========================================

CREATE DATABASE project_sql;
USE project_sql;

SELECT * FROM books;
SELECT * FROM customers;
SELECT * FROM orders;

-- =========================================
-- 1. BASIC QUERIES
-- =========================================

-- 1.1 Retrieve all books in the "Fiction" genre
SELECT * 
FROM books
WHERE genre = 'fiction'
ORDER BY price DESC;

-- 1.2 Find books published after the year 1950
SELECT * 
FROM books
WHERE Published_Year > 1950
ORDER BY Published_Year DESC;

-- 1.3 List all customers from Canada (Davistown)
SELECT * 
FROM customers
WHERE country = 'canada' 
  AND city = 'davistown';

-- 1.4 Show orders placed in November 2023
SELECT * 
FROM orders
WHERE order_date BETWEEN '2023-11-01' AND '2023-11-30';

-- 1.5 Retrieve the total stock of books available
SELECT SUM(stock) AS total_stock
FROM books;

-- 1.6 Find the details of the most expensive book
SELECT * 
FROM books 
ORDER BY price DESC
LIMIT 1;

-- 1.7 Show all customers who ordered more than 1 quantity of a book
SELECT * 
FROM orders AS o
JOIN customers AS c 
  ON o.customer_id = c.customer_id 
WHERE quantity > 1;

-- 1.8 Retrieve all orders where the total amount exceeds $20
SELECT * 
FROM orders
WHERE total_amount > 20;

-- 1.9 List all genres available in the Books table
SELECT DISTINCT genre 
FROM books;

-- 1.10 Find the books with the lowest stock
SELECT * 
FROM books 
ORDER BY stock ASC
LIMIT 5;

-- 1.11 Calculate the total revenue generated from all orders
SELECT SUM(total_amount) AS total_revenue
FROM orders;

-- =========================================
-- 2. ADVANCED SQL QUERIES
-- =========================================

-- 2.1 Retrieve the total number of books sold for each genre
SELECT 
  genre, 
  SUM(quantity) AS books_sold
FROM orders AS o
JOIN books AS b 
  ON o.book_id = b.book_id
GROUP BY genre;

-- 2.2 Find the average price of books in the "Fantasy" genre
SELECT 
  genre,
  AVG(price) AS average_price
FROM books
WHERE genre = 'fantasy';

-- 2.3 List customers who have placed at least 2 orders
SELECT 
  o.customer_id,
  COUNT(o.order_id) AS number_of_orders
FROM orders AS o
JOIN customers AS c 
  ON o.customer_id = c.customer_id
GROUP BY o.customer_id
HAVING COUNT(o.order_id) >= 2;

-- 2.4 Find the most frequently ordered book
SELECT 
  o.book_id,
  b.title,
  COUNT(o.order_id) AS order_frequency
FROM books AS b
JOIN orders AS o 
  ON b.book_id = o.book_id
GROUP BY o.book_id, b.title
ORDER BY order_frequency DESC
LIMIT 1;

-- 2.5 Show the top 3 most expensive books of the 'Fantasy' genre
SELECT 
  title, 
  price
FROM books 
WHERE genre = 'fantasy'
ORDER BY price DESC
LIMIT 3;

-- 2.6 Retrieve the total quantity of books sold by each author
SELECT 
  author, 
  SUM(quantity) AS total_quantity
FROM orders AS o
JOIN books AS b 
  ON o.book_id = b.book_id
GROUP BY author
ORDER BY total_quantity DESC;

-- 2.7 List the cities where customers who spent over $30 are located
SELECT 
  DISTINCT c.customer_id, 
  c.city, 
  SUM(o.total_amount) AS total_spent
FROM customers AS c
JOIN orders AS o 
  ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.city
HAVING SUM(o.total_amount) > 30;

-- 2.8 Find the customer who spent the most on orders
SELECT 
  name, 
  SUM(total_amount) AS total_spent
FROM orders AS o
JOIN customers AS c 
  ON o.customer_id = c.customer_id
GROUP BY o.customer_id
ORDER BY total_spent DESC
LIMIT 1;

-- 2.9 Calculate the stock remaining after fulfilling all orders
SELECT 
  b.book_id,
  title,
  stock,
  COALESCE(SUM(quantity), 0) AS total_ordered,
  stock - COALESCE(SUM(quantity), 0) AS stock_left
FROM books AS b
LEFT JOIN orders AS o 
  ON b.book_id = o.book_id
GROUP BY b.book_id
ORDER BY stock_left DESC;
